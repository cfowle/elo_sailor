library(magrittr)
library(rvest)
library(stringr)
library(tidyr)
setwd("~/code/elo_sailor/pairwise_approach/scrape_etchells/code")
scores = read_csv("../intermediate/scores_id.csv")
View(scores)
scores = read_csv("../intermediate/scores_id.csv") %>%
mutate(X1 = NULL,
X1_1 = NULL)
?gather
test = scores %>%
gather(score = r1:r8)
View(test)
test = scores %>%
gather(score = r1:r8) %>%
rename(race = key,
score = value) %>%
mutate(place = NULL)
test = scores %>%
gather(score = r1:r8) %>%
rename(race = key,
score = value) %>%
mutate(place = NULL)
write.csv(scores, "../intermediate/etchells_races.csv")
scores %<>%
gather(score = r1:r8) %>%
rename(race = key,
score = value) %>%
mutate(place = NULL)
write.csv(scores, "../intermediate/etchells_races.csv")
source('~/code/elo_sailor/pairwise_approach/scrape_etchells/code/scores_by_race.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/scrape_etchells/code/_master.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/scrape_etchells/code/_master.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/_Master.R', echo=TRUE)
##get regatta ids
ids = scores %>%
select(url) %>%
distinct()
View(ids)
scores = read_csv("../intermediate/scores_id.csv") %>%
mutate(X1 = NULL,
X1_1 = NULL)
setwd("~/code/elo_sailor/pairwise_approach/scrape_etchells/code")
scores = read_csv("../intermediate/scores_id.csv") %>%
mutate(X1 = NULL,
X1_1 = NULL)
View(scores)
View(scores)
source('~/code/elo_sailor/pairwise_approach/scrape_etchells/code/scores_by_race.R', echo=TRUE)
View(scores)
#############################################################################
### PROJECT:  ELO SAILOR
### CREATED:  2019-06-24
### MODIFIED: 2019-06-24
### REVIEWED: NO
### SUMMARY:  MASTER FILE FOR PAIRWISE COMPARISON
###############################################################################
library(assertthat)
library(dplyr)
library(elo)
library(ggplot2)
library(magrittr)
library(plotly)
library(readr)
setwd("~/code/elo_sailor/pairwise_approach/Carrie/Code")
USE_EXISTING_RATINGS = FALSE
EXISTING_RATINGS_FILE = ""
RACE_LEVEL = TRUE
SCALE_K = TRUE
K = 42
START_RATING = 1000
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
##get skipper name by id
##use heuristic of longest
names = scores %>%
group_by(id) %>%
summarise(competitorName = max(nchar(skipper)))
scores = read_csv("../intermediate/clean_scores.csv")
skippers = read_csv("../intermediate/skippers_id.csv") %>%
mutate(X1 = NULL)
setwd("~/code/elo_sailor/pairwise_approach/scrape_etchells/code")
scores = read_csv("../intermediate/clean_scores.csv")
skippers = read_csv("../intermediate/skippers_id.csv") %>%
mutate(X1 = NULL)
##clean up skipper and match with ID'd list
scores %<>%
mutate(skipper_raw = skipper,
skipper = tolower(skipper),
boat    = tolower(boat)) %>%
mutate(skipper = str_remove_all(skipper, "(?<= /) *")) %>%
mutate(skipper = str_remove_all(skipper, " *(?=/)")) %>%
mutate(skipper = ifelse(str_detect(skipper, "/"),
str_extract(skipper, "[\\w ]*(?=/)"),
skipper)) %>%
mutate(skipper = ifelse(str_detect(skipper, ", "),
paste(str_extract(skipper, "^\\w*"), str_extract(skipper, "\\w*$")),
skipper)) %>%
mutate(skipper = trimws(skipper)) %>%
mutate(lastName = str_extract(skipper, "\\w*$")) %>%
full_join(skippers)
##get skipper name by id
##use heuristic of longest
names = scores %>%
group_by(id) %>%
summarise(competitorName = max(nchar(skipper)))
##get skipper name by id
##use heuristic of longest
names = scores %>%
group_by(id) %>%
summarise(competitorName = skipper[which(max(length(skipper)))])
##get skipper name by id
##use heuristic of longest
names = scores %>%
group_by(id) %>%
summarise(competitorName = skipper[which(max.length(skipper))])
?max
##get skipper name by id
##use heuristic of longest
names = scores %>%
group_by(id) %>%
summarise(competitorName = skipper[which(max(length(skipper)))])
##get skipper name by id
##use heuristic of longest
names = scores %>%
group_by(id) %>%
summarise(competitorName = skipper[which(length(skipper) == max(length(skipper)))])
View(names)
source('~/code/elo_sailor/pairwise_approach/scrape_etchells/code/id_skippers.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/scrape_etchells/code/scores_by_race.R', echo=TRUE)
setwd("~/code/elo_sailor/pairwise_approach/Carrie/Code")
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/scrape_etchells/code/scores_by_race.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/scrape_etchells/code/_master.R', echo=TRUE)
View(scores)
setwd("~/code/elo_sailor/pairwise_approach/Carrie/Code")
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
View(results)
debugSource('~/code/elo_sailor/pairwise_approach/Carrie/Code/DefinePairwiseComparisonFunction.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
race = results %>%
filter(raceID == raceID) %>%
arrange(score)
scores  = race$score
sailors = race$competitorID
length(sailors)
length(unique(sailors))
debugSource('~/code/elo_sailor/pairwise_approach/Carrie/Code/DefinePairwiseComparisonFunction.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
race = results %>%
filter(raceID == id) %>%
arrange(score)
scores  = race$score
sailors = race$competitorID
assert_that(length(sailors) == length(unique(sailors)),
msg = "ERROR IN createPairwiseComparison: a single competitor id can be present only once in a given race.")
for(i in 1:(length(sailors)-1)){
for(j in (i + 1):length(sailors)){
competitorA = sailors[[i]]
competitorB = sailors[[j]]
scoreA = scores[[i]]
scoreB = scores[[j]]
win = ifelse(scoreA < scoreB, 1, ifelse(scoreA == scoreB, 0.5, 0))
scoreDiff = scoreB - scoreA
newRow = data.frame(raceID, competitorA, competitorB, win, scoreDiff)
matchups = rbind(matchups, newRow)
}
}
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
debugSource('~/code/elo_sailor/pairwise_approach/Carrie/Code/DefineRatingFunctions.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
##check for competitors not in existing ratings & update accordingly
missingCompetitors = checkForMissingCompetitors(existingRatings, results)
output = addCompetitors(competitors, existingRatings, missingCompetitors)
updatedRatings = output[["ratings"]]
competitors = output[["competitors"]]
updatedRatings %<>% mutate(competitorID = as.character(competitorID),
regattaID = as.character(regattaID))
##rewrite results pairwise
pairwiseResults = createPairwiseComparisons(results)
debugSource('~/code/elo_sailor/pairwise_approach/Carrie/Code/DefinePairwiseComparisonFunction.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
##create output data.frame
matchups = data.frame(raceID = numeric,
competitorA = character,
competitorB = character,
win = numeric,
scoreDiff = numeric)
##loop through results to create pairwise comparison
races = unique(results$raceID)
id = "r1"
race = results %>%
filter(raceID == id) %>%
arrange(score)
scores  = race$score
sailors = race$competitorID
assert_that(length(sailors) == length(unique(sailors)),
msg = "ERROR IN createPairwiseComparison: a single competitor id can be present only once in a given race.")
for(i in 1:(length(sailors)-1)){
for(j in (i + 1):length(sailors)){
competitorA = sailors[[i]]
competitorB = sailors[[j]]
scoreA = scores[[i]]
scoreB = scores[[j]]
win = ifelse(scoreA < scoreB, 1, ifelse(scoreA == scoreB, 0.5, 0))
scoreDiff = scoreB - scoreA
newRow = data.frame(raceID, competitorA, competitorB, win, scoreDiff)
matchups = rbind(matchups, newRow)
}
}
debugSource('~/code/elo_sailor/pairwise_approach/Carrie/Code/DefinePairwiseComparisonFunction.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
competitorA = sailors[[i]]
competitorB = sailors[[j]]
scoreA = scores[[i]]
scoreB = scores[[j]]
win = ifelse(scoreA < scoreB, 1, ifelse(scoreA == scoreB, 0.5, 0))
scoreDiff = scoreB - scoreA
newRow = data.frame(raceID, competitorA, competitorB, win, scoreDiff)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/DefinePairwiseComparisonFunction.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
##check for competitors not in existing ratings & update accordingly
missingCompetitors = checkForMissingCompetitors(existingRatings, results)
output = addCompetitors(competitors, existingRatings, missingCompetitors)
updatedRatings = output[["ratings"]]
competitors = output[["competitors"]]
updatedRatings %<>% mutate(competitorID = as.character(competitorID),
regattaID = as.character(regattaID))
##rewrite results pairwise
pairwiseResults = createPairwiseComparisons(results)
races = pairwiseResults %>%
select(raceID) %>%
distinct()
View(pairwiseResults)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/DefinePairwiseComparisonFunction.R', echo=TRUE)
##rewrite results pairwise
pairwiseResults = createPairwiseComparisons(results)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
##check for competitors not in existing ratings & update accordingly
missingCompetitors = checkForMissingCompetitors(existingRatings, results)
output = addCompetitors(competitors, existingRatings, missingCompetitors)
updatedRatings = output[["ratings"]]
competitors = output[["competitors"]]
updatedRatings %<>% mutate(competitorID = as.character(competitorID),
regattaID = as.character(regattaID))
##rewrite results pairwise
pairwiseResults = createPairwiseComparisons(results)
races = pairwiseResults %>%
select(raceID) %>%
distinct()
##loop through races and update ratings
for(i in 1:nrow(races)) {
raceID = races[i, "raceID"]
regattaID = races[i, "regattaID"]
selectedResults = pairwiseResults %>%
filter(raceID == raceID)
output = processRace(updatedRatings, pastRatings, selectedResults, regatta)
updatedRatings = output[["current"]]
pastRatings = output[["past"]]
}
races = pairwiseResults %>%
select(raceID) %>%
distinct()
##rewrite results pairwise
pairwiseResults = createPairwiseComparisons(results)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/DefinePairwiseComparisonFunction.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
##check for competitors not in existing ratings & update accordingly
missingCompetitors = checkForMissingCompetitors(existingRatings, results)
output = addCompetitors(competitors, existingRatings, missingCompetitors)
updatedRatings = output[["ratings"]]
competitors = output[["competitors"]]
updatedRatings %<>% mutate(competitorID = as.character(competitorID),
regattaID = as.character(regattaID))
##rewrite results pairwise
pairwiseResults = createPairwiseComparisons(results)
races = pairwiseResults %>%
select(raceID) %>%
distinct()
##loop through races and update ratings
for(i in 1:nrow(races)) {
raceID = races[i, "raceID"]
regattaID = races[i, "regattaID"]
selectedResults = pairwiseResults %>%
filter(raceID == raceID)
output = processRace(updatedRatings, pastRatings, selectedResults, regatta)
updatedRatings = output[["current"]]
pastRatings = output[["past"]]
}
View(updatedRatings)
View(output)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
debugSource('~/code/elo_sailor/pairwise_approach/Carrie/Code/DefineRatingFunctions.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
##check that inputs conform to constraints
columnNames = c("raceID", "competitorA", "competitorB", "win", "scoreDiff")
checkInputColumns(result, "processResult", columnNames)
##Get score prior to race
competitorA = as.character(result$competitorA[[1]])
competitorB = as.character(result$competitorB[[1]])
ratingA = c(filter(existingRatings, competitorID == competitorA)$rating[[1]])
ratingB = c(filter(existingRatings, competitorID == competitorB)$rating[[1]])
##Get K
if(SCALE_K) {
scoreDiff = result$scoreDiff[[1]]
k = ifelse(scoreDiff == 0, 0, log(scoreDiff)*5)
} else {
k = K
}
##Run Elo update function
win = c(result$win[[1]])
updateValue = elo.update(win, ratingA, ratingB, k = k)
k = K
updateValue = elo.update(win, ratingA, ratingB, k = k)
eloOutput = list(competitorA = 21, competitorB = -21)
debugSource('~/code/elo_sailor/pairwise_approach/Carrie/Code/DefineRatingFunctions.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
competitorA = as.character(result$competitorA[[1]])
competitorB = as.character(result$competitorB[[1]])
output = processResult(existingRatings, result)
updateValues[competitorA] = ifelse(is.numeric(updateValues[[competitorA]]),
updateValues[[competitorA]] + output[["competitorA"]],
output[["competitorA"]])
updateValues[competitorB] = ifelse(is.numeric(updateValues[[competitorB]]),
updateValues[[competitorB]] + output[["competitorB"]],
output[["competitorB"]])
updateValues[competitorA] = ifelse(is.numeric(updateValues[[competitorA]]),
updateValues[[competitorA]] + output[["competitorA"]],
output[["competitorA"]])
updateValues[competitorB] = ifelse(is.numeric(updateValues[[competitorB]]),
updateValues[[competitorB]] + output[["competitorB"]],
output[["competitorB"]])
output = processResult(existingRatings, result)
debugSource('~/code/elo_sailor/pairwise_approach/Carrie/Code/DefineRatingFunctions.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
competitorA = as.character(result$competitorA[[1]])
competitorB = as.character(result$competitorB[[1]])
output = processResult(existingRatings, result)
eloOutput = list(competitorA = updateValue, competitorB = -1*updateValue)
updateValue = elo.update(win, ratingA, ratingB, k = k)
K = 42
SCALE_K = FALSE
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
competitorA = as.character(result$competitorA[[1]])
competitorB = as.character(result$competitorB[[1]])
output = processResult(existingRatings, result)
SCALE_K
k = K
##Run Elo update function
win = c(result$win[[1]])
updateValue = elo.update(win, ratingA, ratingB, k = k)
eloOutput = list(competitorA = updateValue, competitorB = -1*updateValue)
competitorA = as.character(result$competitorA[[1]])
competitorB = as.character(result$competitorB[[1]])
output = processResult(existingRatings, result)
SCALE_K = FALSE
library(readr)
#############################################################################
### PROJECT:  ELO SAILOR
### CREATED:  2019-06-24
### MODIFIED: 2019-06-24
### REVIEWED: NO
### SUMMARY:  MASTER FILE FOR PAIRWISE COMPARISON
###############################################################################
library(assertthat)
library(dplyr)
library(elo)
library(ggplot2)
library(magrittr)
library(plotly)
library(readr)
setwd("~/code/elo_sailor/pairwise_approach/Carrie/Code")
USE_EXISTING_RATINGS = FALSE
EXISTING_RATINGS_FILE = ""
RACE_LEVEL = TRUE
SCALE_K = FALSE
K = 42
START_RATING = 1000
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
debugSource('~/code/elo_sailor/pairwise_approach/Carrie/Code/DefineRatingFunctions.R', echo=TRUE)
source("./DefinePairwiseComparisonFunction.R")
source("./DefineRatingFunctions.R")
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
debugSource('~/code/elo_sailor/pairwise_approach/Carrie/Code/DefineRatingFunctions.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
output = processResult(existingRatings, result)
eloOutput = list(competitorA = updateValue, competitorB = -1*updateValue)
debugSource('~/code/elo_sailor/pairwise_approach/Carrie/Code/DefineRatingFunctions.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
debugSource('~/code/elo_sailor/pairwise_approach/Carrie/Code/DefineRatingFunctions.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
ouptut
output
View(updatedRatings)
competitors
eloOutput = list(competitorA = updateValue, competitorB = -1*updateValue)
debugSource('~/code/elo_sailor/pairwise_approach/Carrie/Code/DefineRatingFunctions.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
output = processRace(updatedRatings, pastRatings, selectedResults, regatta)
processRace(updatedRatings, pastRatings, selectedResults, regatta)
races = pairwiseResults %>%
select(raceID) %>%
distinct()$raceID
races = pairwiseResults %>%
select(raceID) %>%
distinct()
debugSource('~/code/elo_sailor/pairwise_approach/Carrie/Code/DefineRatingFunctions.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
debugSource('~/code/elo_sailor/pairwise_approach/Carrie/Code/DefineRatingFunctions.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
output = processRace(updatedRatings, pastRatings, selectedResults, regatta)
ratingA = c(filter(existingRatings, competitorID == competitorA)$rating[[1]])
ratingB = c(filter(existingRatings, competitorID == competitorB)$rating[[1]])
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
existingRatings
ratingA = c(filter(existingRatings, competitorID == competitorA)$rating[[1]])
ratingB = c(filter(existingRatings, competitorID == competitorB)$rating[[1]])
debugSource('~/code/elo_sailor/pairwise_approach/Carrie/Code/DefineRatingFunctions.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
output = processRace(updatedRatings, pastRatings, selectedResults, regatta)
output
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/DefineRatingFunctions.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/DefineRatingFunctions.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
View(etchells)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
x
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/DefineRatingFunctions.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/DefineRatingFunctions.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/DefineRatingFunctions.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/RunRatings.R', echo=TRUE)
View(existingRatings)
View(competitors)
View(output)
View(etchells)
View(existingRatings)
library(readr)
setwd("~/")
library(readr)
scores_id <- read_csv("code/elo_sailor/pairwise_approach/scrape_etchells/intermediate/scores_id.csv")
View(scores_id)
scores_77 = filter(regatta_id == 77)
library(dplyr)
scores_77 = filter(regatta_id == 77)
scores_77 = filter(scores_id, regatta_id == 77)
scores_grouped = scores_id %>%
group_by(url, id) %>%
summarise(count = n())
View(scores_grouped)
cryc2010 = scores_id %>% filter(url == "http://www.etchellsfleet20.org/results/2010/2010cryccup.html")
View(cryc2010)
flastate2003 = scores%>%filter(url == "http://www.etchellsfleet20.org/results/2003/2003flastate.htm")
flastate2003 = scores_id%>%filter(url == "http://www.etchellsfleet20.org/results/2003/2003flastate.htm")
View(flastate2003)
southatlantic2003 = scores_id %>% filter(url == "http://www.etchellsfleet20.org/results/2003/2003southatlantic.htm")
View(flastate2003)
flastate2004 = scores_id %>% filter(url == "http://www.etchellsfleet20.org/results/2004/2004FloidaState.htm")
View(flastate2004)
midwinters2016 = scores_id %>% filter(url == "http://www.yachtscoring.com/event_results_cumulative.cfm?eID=1447")
View(midwinters2016)
library(readr)
scores <- read_csv("code/elo_sailor/pairwise_approach/scrape_etchells/intermediate/scores.csv")
View(scores)
View(scores)
scores = read_csv("../intermediate/clean_scores.csv")
setwd("~/code/elo_sailor/pairwise_approach/scrape_etchells/code")
scores = read_csv("../intermediate/clean_scores.csv")
View(scores)
View(cryc2010)
##remove bad dupes
scores %<>%
filter(!str_detect(boat, "Corinthian")) %>%
filter(url != "http://www.etchellsfleet20.org/results/2010/2010cryccup.html" | name == "Coral Reef Cup")
libary(stringr)
library(stringr)
##remove bad dupes
scores %<>%
filter(!str_detect(boat, "Corinthian")) %>%
filter(url != "http://www.etchellsfleet20.org/results/2010/2010cryccup.html" | name == "Coral Reef Cup")
source('~/code/elo_sailor/pairwise_approach/scrape_etchells/code/id_skippers.R', echo=TRUE)
###############################################################################
### MASTER FILE FOR SCRAPING ETCHELLS FLEET 20 SCORES
###############################################################################
library(dplyr)
library(magrittr)
library(readr)
library(rvest)
library(stringr)
library(tidyr)
setwd("~/code/elo_sailor/pairwise_approach/scrape_etchells/code")
source('~/code/elo_sailor/pairwise_approach/scrape_etchells/code/id_skippers.R', echo=TRUE)
scores_grouped = scores %>% group_by(id, url) %>% summarise(count = n())
View(scores_grouped)
source('~/code/elo_sailor/pairwise_approach/scrape_etchells/code/id_skippers.R', echo=TRUE)
scores_grouped = scores %>% group_by(id, url) %>% summarise(count = n())
View(scores_grouped)
source('~/code/elo_sailor/pairwise_approach/scrape_etchells/code/id_skippers.R', echo=TRUE)
scores_grouped = scores %>% group_by(id, url) %>% summarise(count = n())
View(scores_grouped)
View(scores)
