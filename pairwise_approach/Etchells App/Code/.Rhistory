debugSource('~/code/elo_sailor/pairwise_approach/Carrie/Code/findValues.R', echo=TRUE)
setwd("~/code/elo_sailor/pairwise_approach/Carrie/Code")
source("./DefinePairwiseComparisonFunction.R")
source("./DefineRatingFunctions.R")
##Define helper functions
fillMissing = function(pastRatings) {
##copies last available rating for all days in the dataset
ids = unique(pastRatings$competitorID)
maxDay = max(pastRatings$day)
for(id in ids) {
sailorRatings = pastRatings %>%
filter(competitorID == id)
lastT = 0
lastRating = 1500
for(i in 1:nrow(sailorRatings) - 1) {
rating = sailorRatings[i, "rating"]
day = sailorRatings[i, "day"]
filler = data.frame(rating = rep(lastRating, day - lastT),
day = lastT:day,
competitorID = rep(id, day - lastT))
pastRatings %<>% binrows(filler)
lastT = day
lastRating = rating
}
filler = data.frame(rating = rep(lastRating, maxDay - lastT),
day = lastT:maxDay,
competitorID = rep(id, maxDay - lastT))
pastRatings %<>% binrows(filler)
}
}
##Loop through values for CORRECTION_VALUE
raceResults = read.csv("../etchells_races.csv")
##Loop through values for CORRECTION_VALUE
raceResults = read.csv("../Input/etchells_races.csv")
for(i in 1:20) {
CORRECTION_VALUE = i
source("./RunRatings.R")
testSet = fillMissing(pastRatings) %>%
mutate(day = day - 1) %>%
inner_join(raceResults) %>%
mutate(competitorID = as.Factor(competitorID))
model = lm(place ~ rating + day + competitorID)
}
testSet = fillMissing(pastRatings) %>%
mutate(day = day - 1) %>%
inner_join(raceResults) %>%
mutate(competitorID = as.Factor(competitorID))
debugSource('~/code/elo_sailor/pairwise_approach/Carrie/Code/findValues.R', echo=TRUE)
debugSource('~/code/elo_sailor/pairwise_approach/Carrie/Code/findValues.R', echo=TRUE)
testSet = fillMissing(pastRatings) %>%
mutate(day = day - 1) %>%
inner_join(raceResults) %>%
mutate(competitorID = as.Factor(competitorID))
rating = sailorRatings[i, rating]
day = sailorRatings[i, day]
filler = data.frame(rating = rep(lastRating, day - lastT),
day = lastT:day,
competitorID = rep(id, day - lastT))
##copies last available rating for all days in the dataset
ids = unique(pastRatings$competitorID)
maxDay = max(pastRatings$day)
sailorRatings = pastRatings %>%
filter(competitorID == id)
lastT = 0
##copies last available rating for all days in the dataset
ids = unique(pastRatings$competitorID)
id = "342"
sailorRatings = pastRatings %>%
filter(competitorID == id)
lastT = 0
lastRating = 1500
i = 1
rating = sailorRatings[i, rating]
rating = sailorRatings[i, ]$rating
day = sailorRatings[i, ]$day
i = 2
rating = sailorRatings[i, ]$rating
day = sailorRatings[i, ]$day
filler = data.frame(rating = rep(lastRating, day - lastT),
day = lastT:day,
competitorID = rep(id, day - lastT))
filler = data.frame(rating = rep(lastRating, day - lastT - 1),
day = (lastT + 1):(day - 1),
competitorID = rep(id, day - lastT - 1))
View(filler)
pastRatings %<>% bindrows(filler)
pastRatings %<>% bind_rows(filler)
lastT = day
lastRating = rating
i = 3
rating = sailorRatings[i, ]$rating
day = sailorRatings[i, ]$day
if(day == lastT) {
next()
}
filler = data.frame(rating = rep(lastRating, day - lastT - 1),
day = (lastT + 1):(day - 1),
competitorID = rep(id, day - lastT - 1))
pastRatings %<>% bind_rows(filler)
lastT = day
lastRating = rating
filler = data.frame(rating = rep(lastRating, maxDay - lastT),
day = (lastT + 1):maxDay,
competitorID = rep(id, maxDay - lastT))
pastRatings %<>% binrows(filler)
testSet = fillMissing(pastRatings) %>%
mutate(day = day - 1) %>%
inner_join(raceResults) %>%
mutate(competitorID = as.Factor(competitorID))
##Define helper functions
fillMissing = function(pastRatings) {
##copies last available rating for all days in the dataset
ids = unique(pastRatings$competitorID)
maxDay = max(pastRatings$day)
for(id in ids) {
sailorRatings = pastRatings %>%
filter(competitorID == id)
lastT = 0
lastRating = 1500
for(i in 1:nrow(sailorRatings) - 1) {
rating = sailorRatings[i, ]$rating
day = sailorRatings[i, ]$day
if(day == lastT) {
next()
}
filler = data.frame(rating = rep(lastRating, day - lastT - 1),
day = (lastT + 1):(day - 1),
competitorID = rep(id, day - lastT - 1))
pastRatings %<>% bind_rows(filler)
lastT = day
lastRating = rating
}
filler = data.frame(rating = rep(lastRating, maxDay - lastT),
day = (lastT + 1):maxDay,
competitorID = rep(id, maxDay - lastT))
pastRatings %<>% bind_rows(filler)
}
}
testSet = fillMissing(pastRatings) %>%
mutate(day = day - 1) %>%
inner_join(raceResults) %>%
mutate(competitorID = as.Factor(competitorID))
##Define helper functions
fillMissing = function(pastRatings) {
##copies last available rating for all days in the dataset
ids = unique(pastRatings$competitorID)
maxDay = max(pastRatings$day)
for(id in ids) {
print(id)
sailorRatings = pastRatings %>%
filter(competitorID == id)
lastT = 0
lastRating = 1500
for(i in 1:nrow(sailorRatings) - 1) {
rating = sailorRatings[i, ]$rating
day = sailorRatings[i, ]$day
if(day == lastT) {
next()
}
filler = data.frame(rating = rep(lastRating, day - lastT - 1),
day = (lastT + 1):(day - 1),
competitorID = rep(id, day - lastT - 1))
pastRatings %<>% bind_rows(filler)
lastT = day
lastRating = rating
}
filler = data.frame(rating = rep(lastRating, maxDay - lastT),
day = (lastT + 1):maxDay,
competitorID = rep(id, maxDay - lastT))
pastRatings %<>% bind_rows(filler)
}
}
testSet = fillMissing(pastRatings) %>%
mutate(day = day - 1) %>%
inner_join(raceResults) %>%
mutate(competitorID = as.Factor(competitorID))
rating = sailorRatings[i, ]$rating
day = sailorRatings[i, ]$day
if(day == lastT) {
next()
}
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/findValues.R', echo=TRUE)
testSet = fillMissing(pastRatings) %>%
mutate(day = day - 1) %>%
inner_join(raceResults) %>%
mutate(competitorID = as.Factor(competitorID))
rating = sailorRatings[i, ]$rating
i = 1
rating = sailorRatings[i, ]$rating
day = sailorRatings[i, ]$day
day
lastT
lastT = 0
lastT
day == lastT
if(day == lastT) {
next()
}
##Define helper functions
fillMissing = function(pastRatings) {
##copies last available rating for all days in the dataset
ids = unique(pastRatings$competitorID)
maxDay = max(pastRatings$day)
for(id in ids) {
print(id)
sailorRatings = pastRatings %>%
filter(competitorID == id)
lastT = 0
lastRating = 1500
for(i in 1:nrow(sailorRatings) - 1) {
rating = sailorRatings[i, ]$rating
day = sailorRatings[i, ]$day
if(day == lastT) {
next()
}
filler = data.frame(rating = rep(lastRating, day - lastT - 1),
day = (lastT + 1):(day - 1),
competitorID = rep(id, day - lastT - 1))
pastRatings %<>% bind_rows(filler)
lastT = day
lastRating = rating
}
filler = data.frame(rating = rep(lastRating, maxDay - lastT),
day = (lastT + 1):maxDay,
competitorID = rep(id, maxDay - lastT))
pastRatings %<>% bind_rows(filler)
}
}
testSet = fillMissing(pastRatings) %>%
mutate(day = day - 1) %>%
inner_join(raceResults) %>%
mutate(competitorID = as.Factor(competitorID))
debugSource('~/code/elo_sailor/pairwise_approach/Carrie/Code/findValues.R', echo=TRUE)
testSet = fillMissing(pastRatings) %>%
mutate(day = day - 1) %>%
inner_join(raceResults) %>%
mutate(competitorID = as.Factor(competitorID))
day = sailorRatings[i, ]$day
##Define helper functions
fillMissing = function(pastRatings) {
##copies last available rating for all days in the dataset
ids = unique(pastRatings$competitorID)
maxDay = max(pastRatings$day)
for(id in ids) {
print(id)
sailorRatings = pastRatings %>%
filter(competitorID == id)
lastT = 0
lastRating = 1500
for(i in 1:(nrow(sailorRatings) - 1)) {
rating = sailorRatings[i, ]$rating
day = sailorRatings[i, ]$day
print(day == lastT)
if(day == lastT) {
next()
}
filler = data.frame(rating = rep(lastRating, day - lastT - 1),
day = (lastT + 1):(day - 1),
competitorID = rep(id, day - lastT - 1))
pastRatings %<>% bind_rows(filler)
lastT = day
lastRating = rating
}
filler = data.frame(rating = rep(lastRating, maxDay - lastT),
day = (lastT + 1):maxDay,
competitorID = rep(id, maxDay - lastT))
pastRatings %<>% bind_rows(filler)
}
}
testSet = fillMissing(pastRatings) %>%
mutate(day = day - 1) %>%
inner_join(raceResults) %>%
mutate(competitorID = as.Factor(competitorID))
i = 3
rating = sailorRatings[i, ]$rating
day = sailorRatings[i, ]$day
filler = data.frame(rating = rep(lastRating, day - lastT - 1),
day = (lastT + 1):(day - 1),
competitorID = rep(id, day - lastT - 1))
View(filler)
##Define helper functions
fillMissing = function(pastRatings) {
##copies last available rating for all days in the dataset
ids = unique(pastRatings$competitorID)
maxDay = max(pastRatings$day)
for(id in ids) {
print(id)
sailorRatings = pastRatings %>%
filter(competitorID == id)
lastT = 0
lastRating = 1500
for(i in 1:(nrow(sailorRatings) - 1)) {
rating = sailorRatings[i, ]$rating
day = sailorRatings[i, ]$day
if(day - lastT < 2) {
next()
}
filler = data.frame(rating = rep(lastRating, day - lastT - 1),
day = (lastT + 1):(day - 1),
competitorID = rep(id, day - lastT - 1))
pastRatings %<>% bind_rows(filler)
lastT = day
lastRating = rating
}
filler = data.frame(rating = rep(lastRating, maxDay - lastT),
day = (lastT + 1):maxDay,
competitorID = rep(id, maxDay - lastT))
pastRatings %<>% bind_rows(filler)
}
}
testSet = fillMissing(pastRatings) %>%
mutate(day = day - 1) %>%
inner_join(raceResults) %>%
mutate(competitorID = as.Factor(competitorID))
View(pastRatings)
id = "244"
sailorRatings = pastRatings %>%
filter(competitorID == id)
lastT = 0
lastRating = 1500
1:(nrow(sailorRatings) - 1)
##Define helper functions
fillMissing = function(pastRatings) {
##copies last available rating for all days in the dataset
ids = unique(pastRatings$competitorID)
maxDay = max(pastRatings$day)
for(id in ids) {
print(id)
sailorRatings = pastRatings %>%
filter(competitorID == id)
lastT = 0
lastRating = 1500
if(nrow(sailingRatings) > 1) {
for(i in 1:(nrow(sailorRatings) - 1)) {
rating = sailorRatings[i, ]$rating
day = sailorRatings[i, ]$day
if(day - lastT < 2) {
next()
}
filler = data.frame(rating = rep(lastRating, day - lastT - 1),
day = (lastT + 1):(day - 1),
competitorID = rep(id, day - lastT - 1))
pastRatings %<>% bind_rows(filler)
lastT = day
lastRating = rating
}
}
filler = data.frame(rating = rep(lastRating, maxDay - lastT),
day = (lastT + 1):maxDay,
competitorID = rep(id, maxDay - lastT))
pastRatings %<>% bind_rows(filler)
}
return(pastRatings)
}
testSet = fillMissing(pastRatings) %>%
mutate(day = day - 1) %>%
inner_join(raceResults) %>%
mutate(competitorID = as.Factor(competitorID))
##Define helper functions
fillMissing = function(pastRatings) {
##copies last available rating for all days in the dataset
ids = unique(pastRatings$competitorID)
maxDay = max(pastRatings$day)
for(id in ids) {
print(id)
sailorRatings = pastRatings %>%
filter(competitorID == id)
lastT = 0
lastRating = 1500
if(nrow(sailorRatings) > 1) {
for(i in 1:(nrow(sailorRatings) - 1)) {
rating = sailorRatings[i, ]$rating
day = sailorRatings[i, ]$day
if(day - lastT < 2) {
next()
}
filler = data.frame(rating = rep(lastRating, day - lastT - 1),
day = (lastT + 1):(day - 1),
competitorID = rep(id, day - lastT - 1))
pastRatings %<>% bind_rows(filler)
lastT = day
lastRating = rating
}
}
filler = data.frame(rating = rep(lastRating, maxDay - lastT),
day = (lastT + 1):maxDay,
competitorID = rep(id, maxDay - lastT))
pastRatings %<>% bind_rows(filler)
}
return(pastRatings)
}
testSet = fillMissing(pastRatings) %>%
mutate(day = day - 1) %>%
inner_join(raceResults) %>%
mutate(competitorID = as.Factor(competitorID))
testSet = fillMissing(pastRatings) %>%
mutate(day = day - 1)
View(raceResults)
fillMissing(pastRatings) %>%
mutate(day = day - 1) %>%
inner_join(raceResults)
##Loop through values for CORRECTION_VALUE
raceResults = read.csv("../Input/etchells_races.csv") %>%
select(place, competitorID, day) %>%
mutate(competitorID = as.Character(competitorID))
##Loop through values for CORRECTION_VALUE
raceResults = read.csv("../Input/etchells_races.csv") %>%
select(place, competitorID, day) %>%
mutate(competitorID = as.character(competitorID))
testSet = fillMissing(pastRatings) %>%
mutate(day = day - 1) %>%
inner_join(raceResults) %>%
mutate(competitorID = as.Factor(competitorID))
testSet = fillMissing(pastRatings) %>%
mutate(day = day - 1) %>%
inner_join(raceResults) %>%
mutate(competitorID = as.factor(competitorID))
View(testSet)
model = lm(place ~ rating + day + competitorID)
model = lm(place ~ rating + day + competitorID, data = testSet)
summary(model)
model = lm(place ~ rating, data = testSet)
summary(model)
coeff = model$coefficients
resid = model$residuals
resid
coeff
rsqrd = summary(model)$r.squared
str(summary(model))
pvalue = summary(model)$coefficients[,4]
pvalue
row = data.frame(coeff[[2]], rsqrd, pvalue[[2]])
row
results = data.frame()
results %<>% bind_rows(row)
maxRSqrd = max(results$rsqrd)
CORRECTION_VALUE = testSet %>%
filter(rsqrd == maxRSqrd)$i[[1]]
CORRECTION_VALUE = testSet %>%
filter(rsqrd == maxRSqrd)
CORRECTION_VALUE = results %>%
filter(rsqrd == maxRSqrd)
CORRECTION_VALUE = results %>%
filter(rsqrd == maxRSqrd)$i
CORRECTION_VALUE = results %>%
filter(rsqrd == maxRSqrd) %>%
select(i)[[1]]
CORRECTION_VALUE = results %>%
filter(rsqrd == maxRSqrd) %>%
select(i)
CORRECTION_VALUE = CORRECTION_VALUE[[1]]
View(row)
View(results)
row = data.frame(coeff[[2]], rsqrd, pvalue[[2]], CORRECTION_VALUE)
results = data.frame()
results %<>% bind_rows(row)
maxRSqrd = max(results$rsqrd)
write.csv("../Output/fittingCorrection.R")
write.csv(results, "../Output/fittingCorrection.R")
maxRSqrd = max(results$rsqrd)
CORRECTION_VALUE = results %>%
filter(rsqrd == maxRSqrd) %>%
select(i)
CORRECTION_VALUE = CORRECTION_VALUE[[1]]
results %>%
filter(rsqrd == maxRSqrd)
CORRECTION_VALUE = results %>%
filter(rsqrd == maxRSqrd) %>%
select(CORRECTION_VALUE)
CORRECTION_VALUE = CORRECTION_VALUE[[1]]
CORRECTION_VALUE = results %>%
filter(rsqrd == maxRSqrd) %>%
select(CORRECTION_VALUE)
row = data.frame(coeff[[2]], rsqrd, pvalue[[2]], CORRECTION_VALUE)
CORRECTION_VALUE = i
row = data.frame(coeff[[2]], rsqrd, pvalue[[2]], CORRECTION_VALUE)
results = data.frame()
results %<>% bind_rows(row)
maxRSqrd = max(results$rsqrd)
CORRECTION_VALUE = results %>%
filter(rsqrd == maxRSqrd) %>%
select(CORRECTION_VALUE)
CORRECTION_VALUE = CORRECTION_VALUE[[1]]
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/findValues.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/findValues.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/findValues.R', echo=TRUE)
View(results)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/findValues.R', echo=TRUE)
debugSource('~/code/elo_sailor/pairwise_approach/Carrie/Code/findValues.R', echo=TRUE)
View(modelResults)
View(modelResults)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/_Master.R', echo=TRUE)
View(pastRatings)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/_Master.R', echo=TRUE)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/_Master.R', echo=TRUE)
mean(existingRatings$rating)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/_Master.R', echo=TRUE)
mean(existingRatings$rating)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/_Master.R', echo=TRUE)
mean(existingRatings$rating)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/_Master.R', echo=TRUE)
mean(existingRatings$rating)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/_Master.R', echo=TRUE)
mean(existingRatings$rating)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/_Master.R', echo=TRUE)
mean(existingRatings$rating)
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/_Master.R', echo=TRUE)
mean(existingRatings$rating)
shiny::runApp('~/code/elo_sailor/pairwise_approach/Etchells App/Code')
source('~/code/elo_sailor/pairwise_approach/Carrie/Code/_Master.R', echo=TRUE)
mean(existingRatings$rating)
runApp('~/code/elo_sailor/pairwise_approach/Etchells App/Code')
